{
  "openapi": "3.0.0",
  "info": {
    "title": "API Documentation",
    "version": "1.0.0",
    "description": "This is the OpenAPI specification for your project."
  },
  "servers": [
    {
      "url": "http://localhost:3000/api",
      "description": "Local development server"
    }
  ],
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "OrdersQueryParams": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "nullable": true,
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "maximum": 100,
            "nullable": true,
            "default": 20,
            "description": "Results per page"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderStatusSchema"
              }
            ],
            "description": "Filter by status"
          },
          "dateFrom": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Filter orders from date"
          },
          "dateTo": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Filter orders to date"
          },
          "sort": {
            "type": "string",
            "enum": [
              "date_asc",
              "date_desc",
              "total_asc",
              "total_desc"
            ],
            "nullable": true,
            "default": "date_desc",
            "description": "Sort results"
          }
        }
      },
      "OrdersResponse": {
        "type": "object",
        "properties": {
          "orders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderSchema"
            },
            "description": "List of orders"
          },
          "pagination": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer",
                "minimum": 0,
                "description": "Total number of orders"
              },
              "pages": {
                "type": "integer",
                "minimum": 0,
                "exclusiveMinimum": true,
                "description": "Total number of pages"
              },
              "page": {
                "type": "integer",
                "minimum": 0,
                "exclusiveMinimum": true,
                "description": "Current page"
              },
              "limit": {
                "type": "integer",
                "minimum": 0,
                "exclusiveMinimum": true,
                "description": "Results per page"
              }
            },
            "required": [
              "total",
              "pages",
              "page",
              "limit"
            ],
            "description": "Pagination information"
          }
        },
        "required": [
          "orders",
          "pagination"
        ]
      },
      "CreateOrderBody": {
        "type": "object",
        "properties": {
          "cartId": {
            "type": "string",
            "format": "uuid",
            "description": "Cart ID"
          },
          "shippingAddressId": {
            "type": "integer",
            "nullable": true,
            "description": "ID of shipping address from user profile"
          },
          "billingAddressId": {
            "type": "integer",
            "nullable": true,
            "description": "ID of billing address from user profile"
          },
          "shippingAddress": {
            "type": "object",
            "description": "New shipping address"
          },
          "billingAddress": {
            "type": "object",
            "description": "New billing address"
          },
          "useShippingAsBilling": {
            "type": "boolean",
            "nullable": true,
            "default": true,
            "description": "Use shipping address as billing address"
          },
          "paymentMethodId": {
            "type": "integer",
            "nullable": true,
            "description": "ID of saved payment method"
          },
          "paymentMethod": {
            "type": "object",
            "description": "New payment method"
          },
          "notes": {
            "type": "string",
            "nullable": true,
            "description": "Additional order notes"
          }
        },
        "required": [
          "cartId"
        ]
      },
      "OrderSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Order ID"
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "description": "User ID"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CartItemSchema"
            },
            "description": "Purchased products"
          },
          "shippingAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressSchema"
              }
            ],
            "description": "Shipping address"
          },
          "billingAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressSchema"
              }
            ],
            "description": "Billing address (can be the same as shipping address)"
          },
          "paymentMethod": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodSchema"
              }
            ],
            "description": "Payment method"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderStatusSchema"
              }
            ],
            "description": "Order status"
          },
          "subtotal": {
            "type": "number",
            "minimum": 0,
            "description": "Subtotal (without discount and shipping)"
          },
          "discountAmount": {
            "type": "number",
            "minimum": 0,
            "default": 0,
            "description": "Discount amount"
          },
          "shippingCost": {
            "type": "number",
            "minimum": 0,
            "description": "Shipping cost"
          },
          "tax": {
            "type": "number",
            "minimum": 0,
            "description": "Tax"
          },
          "total": {
            "type": "number",
            "minimum": 0,
            "description": "Total amount"
          },
          "notes": {
            "type": "string",
            "nullable": true,
            "description": "Additional notes"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Order creation date"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last update date"
          },
          "paymentDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Payment date"
          },
          "shippingDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Shipping date"
          },
          "deliveryDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Delivery date"
          }
        },
        "required": [
          "id",
          "userId",
          "items",
          "shippingAddress",
          "billingAddress",
          "paymentMethod",
          "status",
          "subtotal",
          "discountAmount",
          "shippingCost",
          "tax",
          "total",
          "createdAt",
          "updatedAt"
        ]
      },
      "OrderIdParams": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Order ID"
          }
        },
        "required": [
          "id"
        ]
      },
      "UpdateOrderStatusBody": {
        "type": "object",
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderStatusSchema"
              }
            ],
            "description": "New order status"
          },
          "notes": {
            "type": "string",
            "nullable": true,
            "description": "Additional notes about the status change"
          }
        },
        "required": [
          "status"
        ]
      },
      "ProductQueryParams": {
        "type": "object",
        "properties": {
          "include_variants": {
            "type": "boolean",
            "nullable": true,
            "description": "Whether to include product variants"
          },
          "currency": {
            "type": "string",
            "enum": [
              "USD",
              "EUR",
              "PLN"
            ],
            "default": "USD",
            "description": "Currency for prices"
          }
        },
        "required": [
          "currency"
        ]
      },
      "ProductIdParams": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique product identifier"
          }
        },
        "required": [
          "id"
        ]
      },
      "ProductResponseSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique product identifier"
          },
          "name": {
            "type": "string",
            "minLength": 3,
            "description": "Product name"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Product description"
          },
          "price": {
            "type": "number",
            "minimum": 0,
            "exclusiveMinimum": true,
            "description": "Base product price"
          },
          "image_url": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "URL to main product image"
          },
          "gallery": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            },
            "description": "Product image gallery"
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductCategorySchema"
            },
            "description": "Product categories"
          },
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductVariantSchema"
            },
            "nullable": true,
            "description": "Product variants"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Product creation date"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Product last update date"
          },
          "status": {
            "type": "string",
            "enum": [
              "draft",
              "published",
              "archived"
            ],
            "description": "Product status"
          },
          "average_rating": {
            "type": "number",
            "minimum": 0,
            "maximum": 5,
            "nullable": true,
            "description": "Average product rating"
          }
        },
        "required": [
          "id",
          "name",
          "price",
          "gallery",
          "categories",
          "created_at",
          "updated_at",
          "status"
        ]
      },
      "UpdateProductSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "nullable": true,
            "description": "Product name"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Product description"
          },
          "price": {
            "type": "number",
            "minimum": 0,
            "exclusiveMinimum": true,
            "nullable": true,
            "description": "Base product price"
          },
          "image_url": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "URL to main product image"
          },
          "gallery": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            },
            "nullable": true,
            "description": "Product image gallery"
          },
          "category_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "description": "Product category identifiers"
          },
          "status": {
            "type": "string",
            "enum": [
              "draft",
              "published",
              "archived"
            ],
            "nullable": true,
            "description": "Product status"
          }
        }
      },
      "UploadFormDataSchema": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "description": "Image file (PNG/JPG, max 5MB)"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Optional file description"
          },
          "category": {
            "type": "string",
            "minLength": 1,
            "description": "File category (required)"
          }
        },
        "required": [
          "file",
          "category"
        ]
      },
      "UploadResponseSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Upload ID"
          },
          "filename": {
            "type": "string",
            "description": "Original filename"
          },
          "size": {
            "type": "number",
            "description": "File size in bytes"
          },
          "type": {
            "type": "string",
            "description": "MIME type"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "File access URL"
          },
          "category": {
            "type": "string",
            "description": "File category"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "File description"
          },
          "uploadedAt": {
            "type": "string",
            "description": "Upload timestamp"
          }
        },
        "required": [
          "id",
          "filename",
          "size",
          "type",
          "url",
          "category",
          "uploadedAt"
        ]
      },
      "UserListParamsSchema": {
        "type": "object",
        "properties": {
          "pagination": {
            "type": "object"
          },
          "filter": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "nullable": true
          }
        },
        "required": [
          "pagination",
          "pagination"
        ]
      },
      "UserDetailedSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique user identifier"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          },
          "name": {
            "type": "string",
            "minLength": 2,
            "maxLength": 100,
            "description": "User's full name"
          },
          "role": {
            "type": "string",
            "enum": [
              "user",
              "admin",
              "moderator"
            ],
            "description": "User's role in the system"
          }
        },
        "required": [
          "id",
          "email",
          "name",
          "role"
        ]
      },
      "UserFieldsQuery": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "string",
            "nullable": true,
            "description": "Comma-separated list of fields to include"
          }
        }
      },
      "UserIdParams": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "User ID"
          }
        },
        "required": [
          "id"
        ]
      },
      "UpdateUserBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 2,
            "maxLength": 100,
            "nullable": true,
            "description": "User's full name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true,
            "description": "User's email address"
          },
          "phone": {
            "type": "string",
            "pattern": "^\\+\\d{1,3} \\d{3} \\d{3} \\d{3}$",
            "nullable": true,
            "description": "Phone number (format: +XX XXX XXX XXX)"
          },
          "preferences": {
            "type": "object",
            "properties": {
              "language": {
                "type": "string",
                "enum": [
                  "pl",
                  "en",
                  "de"
                ],
                "nullable": true,
                "description": "Preferred language"
              },
              "theme": {
                "type": "string",
                "enum": [
                  "light",
                  "dark",
                  "system"
                ],
                "nullable": true,
                "description": "Preferred theme"
              },
              "notifications": {
                "type": "boolean",
                "nullable": true,
                "description": "Whether notifications are enabled"
              }
            },
            "nullable": true,
            "description": "User preferences"
          }
        }
      },
      "OrderStatusSchema": {
        "type": "string",
        "enum": [
          "pending",
          "payment_processing",
          "paid",
          "preparing",
          "shipped",
          "delivered",
          "cancelled",
          "refunded"
        ],
        "description": "Order status"
      },
      "CartItemSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Cart item ID"
          },
          "productId": {
            "type": "string",
            "format": "uuid",
            "description": "Product ID"
          },
          "name": {
            "type": "string",
            "description": "Product name"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Product description"
          },
          "price": {
            "type": "number",
            "minimum": 0,
            "description": "Unit price"
          },
          "quantity": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "description": "Quantity"
          },
          "total": {
            "type": "number",
            "minimum": 0,
            "description": "Total price (price * quantity)"
          },
          "imageUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "Product image URL"
          },
          "variant": {
            "type": "string",
            "nullable": true,
            "description": "Product variant (e.g., size, color)"
          }
        },
        "required": [
          "id",
          "productId",
          "name",
          "price",
          "quantity",
          "total"
        ]
      },
      "OrderStatus": {
        "type": "string",
        "enum": [
          "pending",
          "payment_processing",
          "paid",
          "preparing",
          "shipped",
          "delivered",
          "cancelled",
          "refunded"
        ],
        "description": "Order status"
      },
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Order ID"
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "description": "User ID"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CartItemSchema"
            },
            "description": "Purchased products"
          },
          "shippingAddress": {
            "type": "object"
          },
          "billingAddress": {
            "type": "object"
          },
          "paymentMethod": {
            "type": "object"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderStatusSchema"
              }
            ],
            "description": "Order status"
          },
          "subtotal": {
            "type": "number",
            "minimum": 0,
            "description": "Subtotal (without discount and shipping)"
          },
          "discountAmount": {
            "type": "number",
            "minimum": 0,
            "default": 0,
            "description": "Discount amount"
          },
          "shippingCost": {
            "type": "number",
            "minimum": 0,
            "description": "Shipping cost"
          },
          "tax": {
            "type": "number",
            "minimum": 0,
            "description": "Tax"
          },
          "total": {
            "type": "number",
            "minimum": 0,
            "description": "Total amount"
          },
          "notes": {
            "type": "string",
            "nullable": true,
            "description": "Additional notes"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Order creation date"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last update date"
          },
          "paymentDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Payment date"
          },
          "shippingDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Shipping date"
          },
          "deliveryDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Delivery date"
          }
        },
        "required": [
          "id",
          "userId",
          "items",
          "shippingAddress",
          "billingAddress",
          "paymentMethod",
          "status",
          "subtotal",
          "discountAmount",
          "shippingCost",
          "tax",
          "total",
          "createdAt",
          "updatedAt"
        ]
      },
      "OrdersQuery": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "nullable": true,
            "default": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "maximum": 100,
            "nullable": true,
            "default": 20,
            "description": "Results per page"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderStatusSchema"
              }
            ],
            "description": "Filter by status"
          },
          "dateFrom": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Filter orders from date"
          },
          "dateTo": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Filter orders to date"
          },
          "sort": {
            "type": "string",
            "enum": [
              "date_asc",
              "date_desc",
              "total_asc",
              "total_desc"
            ],
            "nullable": true,
            "default": "date_desc",
            "description": "Sort results"
          }
        }
      },
      "CreateOrder": {
        "type": "object",
        "properties": {
          "cartId": {
            "type": "string",
            "format": "uuid",
            "description": "Cart ID"
          },
          "shippingAddressId": {
            "type": "integer",
            "nullable": true,
            "description": "ID of shipping address from user profile"
          },
          "billingAddressId": {
            "type": "integer",
            "nullable": true,
            "description": "ID of billing address from user profile"
          },
          "shippingAddress": {
            "type": "object",
            "description": "New shipping address"
          },
          "billingAddress": {
            "type": "object",
            "description": "New billing address"
          },
          "useShippingAsBilling": {
            "type": "boolean",
            "nullable": true,
            "default": true,
            "description": "Use shipping address as billing address"
          },
          "paymentMethodId": {
            "type": "integer",
            "nullable": true,
            "description": "ID of saved payment method"
          },
          "paymentMethod": {
            "type": "object",
            "description": "New payment method"
          },
          "notes": {
            "type": "string",
            "nullable": true,
            "description": "Additional order notes"
          }
        },
        "required": [
          "cartId"
        ]
      },
      "PaymentMethodSchema": {
        "type": "object",
        "discriminator": {
          "propertyName": "type"
        },
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "card"
                ],
                "description": "Payment method type"
              },
              "cardNumber": {
                "type": "string",
                "pattern": "^\\d{4} \\d{4} \\d{4} \\d{4}$",
                "description": "Card number (format: XXXX XXXX XXXX XXXX)"
              },
              "expiryDate": {
                "type": "string",
                "pattern": "^\\d{2}\\/\\d{2}$",
                "description": "Expiry date (format: MM/YY)"
              },
              "cardholderName": {
                "type": "string",
                "description": "Cardholder's name"
              }
            },
            "required": [
              "type",
              "cardNumber",
              "expiryDate",
              "cardholderName"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "bankTransfer"
                ],
                "description": "Payment method type"
              },
              "accountNumber": {
                "type": "string",
                "pattern": "^\\d{26}$",
                "description": "Bank account number (26 digits)"
              },
              "bankName": {
                "type": "string",
                "description": "Bank name"
              }
            },
            "required": [
              "type",
              "accountNumber",
              "bankName"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "paypal"
                ],
                "description": "Payment method type"
              },
              "email": {
                "type": "string",
                "format": "email",
                "description": "Email address associated with PayPal"
              }
            },
            "required": [
              "type",
              "email"
            ]
          }
        ]
      },
      "PaginationSchema": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "minimum": 1
          },
          "limit": {
            "type": "integer",
            "minimum": 1
          }
        },
        "required": [
          "page",
          "limit"
        ]
      },
      "PaymentMethod": {
        "type": "object",
        "discriminator": {
          "propertyName": "type"
        },
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "card"
                ],
                "description": "Payment method type"
              },
              "cardNumber": {
                "type": "string",
                "pattern": "^\\d{4} \\d{4} \\d{4} \\d{4}$",
                "description": "Card number (format: XXXX XXXX XXXX XXXX)"
              },
              "expiryDate": {
                "type": "string",
                "pattern": "^\\d{2}\\/\\d{2}$",
                "description": "Expiry date (format: MM/YY)"
              },
              "cardholderName": {
                "type": "string",
                "description": "Cardholder's name"
              }
            },
            "required": [
              "type",
              "cardNumber",
              "expiryDate",
              "cardholderName"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "bankTransfer"
                ],
                "description": "Payment method type"
              },
              "accountNumber": {
                "type": "string",
                "pattern": "^\\d{26}$",
                "description": "Bank account number (26 digits)"
              },
              "bankName": {
                "type": "string",
                "description": "Bank name"
              }
            },
            "required": [
              "type",
              "accountNumber",
              "bankName"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "paypal"
                ],
                "description": "Payment method type"
              },
              "email": {
                "type": "string",
                "format": "email",
                "description": "Email address associated with PayPal"
              }
            },
            "required": [
              "type",
              "email"
            ]
          }
        ]
      },
      "ProductCategorySchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Category identifier"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Category name"
          },
          "slug": {
            "type": "string",
            "description": "Category slug used in URLs"
          }
        },
        "required": [
          "id",
          "name",
          "slug"
        ]
      },
      "ProductVariantSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Variant identifier"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Variant name"
          },
          "sku": {
            "type": "string",
            "description": "Variant SKU code"
          },
          "price": {
            "type": "number",
            "minimum": 0,
            "exclusiveMinimum": true,
            "description": "Variant price"
          },
          "stock": {
            "type": "integer",
            "minimum": 0,
            "description": "Stock quantity"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Variant attributes (color, size, etc.)"
          }
        },
        "required": [
          "id",
          "name",
          "sku",
          "price",
          "stock",
          "attributes"
        ]
      },
      "UploadFormData": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "description": "Image file (PNG/JPG, max 5MB)"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Optional file description"
          },
          "category": {
            "type": "string",
            "minLength": 1,
            "description": "File category (required)"
          }
        },
        "required": [
          "file",
          "category"
        ]
      },
      "UploadResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Upload ID"
          },
          "filename": {
            "type": "string",
            "description": "Original filename"
          },
          "size": {
            "type": "number",
            "description": "File size in bytes"
          },
          "type": {
            "type": "string",
            "description": "MIME type"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "File access URL"
          },
          "category": {
            "type": "string",
            "description": "File category"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "File description"
          },
          "uploadedAt": {
            "type": "string",
            "description": "Upload timestamp"
          }
        },
        "required": [
          "id",
          "filename",
          "size",
          "type",
          "url",
          "category",
          "uploadedAt"
        ]
      },
      "UserBaseSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique user identifier"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          },
          "name": {
            "type": "string",
            "minLength": 2,
            "maxLength": 100,
            "description": "User's full name"
          },
          "role": {
            "type": "string",
            "enum": [
              "user",
              "admin",
              "moderator"
            ],
            "description": "User's role in the system"
          }
        },
        "required": [
          "id",
          "email",
          "name",
          "role"
        ]
      },
      "AddressSchema": {
        "type": "object",
        "properties": {
          "street": {
            "type": "string",
            "description": "Street name"
          },
          "houseNumber": {
            "type": "string",
            "description": "House/apartment number"
          },
          "city": {
            "type": "string",
            "description": "City"
          },
          "postalCode": {
            "type": "string",
            "pattern": "^\\d{2}-\\d{3}$",
            "description": "Postal code (format: XX-XXX)"
          },
          "country": {
            "type": "string",
            "default": "Poland",
            "description": "Country"
          }
        },
        "required": [
          "street",
          "houseNumber",
          "city",
          "postalCode",
          "country"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique user identifier"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          },
          "name": {
            "type": "string",
            "minLength": 2,
            "maxLength": 100,
            "description": "User's full name"
          },
          "role": {
            "type": "string",
            "enum": [
              "user",
              "admin",
              "moderator"
            ],
            "description": "User's role in the system"
          }
        },
        "required": [
          "id",
          "email",
          "name",
          "role"
        ]
      },
      "UserDetailed": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique user identifier"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          },
          "name": {
            "type": "string",
            "minLength": 2,
            "maxLength": 100,
            "description": "User's full name"
          },
          "role": {
            "type": "string",
            "enum": [
              "user",
              "admin",
              "moderator"
            ],
            "description": "User's role in the system"
          }
        },
        "required": [
          "id",
          "email",
          "name",
          "role"
        ]
      },
      "Address": {
        "type": "object",
        "properties": {
          "street": {
            "type": "string",
            "description": "Street name"
          },
          "houseNumber": {
            "type": "string",
            "description": "House/apartment number"
          },
          "city": {
            "type": "string",
            "description": "City"
          },
          "postalCode": {
            "type": "string",
            "pattern": "^\\d{2}-\\d{3}$",
            "description": "Postal code (format: XX-XXX)"
          },
          "country": {
            "type": "string",
            "default": "Poland",
            "description": "Country"
          }
        },
        "required": [
          "street",
          "houseNumber",
          "city",
          "postalCode",
          "country"
        ]
      }
    },
    "responses": {
      "400": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "error": {
                  "type": "string",
                  "example": "Validation error"
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "error": {
                  "type": "string",
                  "example": "Unathorized"
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "error": {
                  "type": "string",
                  "example": "Something went wrong"
                }
              }
            }
          }
        }
      }
    }
  },
  "outputDir": "./public",
  "paths": {
    "/orders": {
      "get": {
        "operationId": "get-orders",
        "summary": "Get orders list\r",
        "description": "Retrieves a paginated list of orders with filtering and sorting options",
        "tags": [
          "Orders"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "description": "Page number"
            },
            "required": false,
            "description": "Page number"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "description": "Results per page"
            },
            "required": false,
            "description": "Results per page"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "description": "Filter by status"
            },
            "required": false,
            "description": "Filter by status"
          },
          {
            "in": "query",
            "name": "dateFrom",
            "schema": {
              "type": "string",
              "description": "Filter orders from date"
            },
            "required": false,
            "description": "Filter orders from date"
          },
          {
            "in": "query",
            "name": "dateTo",
            "schema": {
              "type": "string",
              "description": "Filter orders to date"
            },
            "required": false,
            "description": "Filter orders to date"
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string",
              "enum": [
                "date_asc",
                "date_desc",
                "total_asc",
                "total_desc"
              ],
              "description": "Sort results"
            },
            "required": false,
            "description": "Sort results"
          }
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrdersResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "operationId": "post-orders",
        "summary": "Create order\r",
        "description": "Creates a new order from cart",
        "tags": [
          "Orders"
        ],
        "parameters": [],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderSchema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/orders/{id}": {
      "get": {
        "operationId": "get-orders-{id}",
        "summary": "Path parameters schema",
        "description": "Retrieves detailed order information",
        "tags": [
          "Orders"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "description": "Order ID"
            },
            "required": true,
            "description": "Order ID",
            "example": "123"
          }
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderSchema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "patch-orders-{id}",
        "summary": "Update order status\r",
        "description": "Updates the status of an order",
        "tags": [
          "Orders"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "description": "Order ID"
            },
            "required": true,
            "description": "Order ID",
            "example": "123"
          }
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderStatusBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderSchema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "delete-orders-{id}",
        "summary": "Cancel order\r",
        "description": "Cancels an order if it's not already delivered",
        "tags": [
          "Orders"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "description": "Order ID"
            },
            "required": true,
            "description": "Order ID",
            "example": "123"
          }
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/products/{id}": {
      "get": {
        "operationId": "get-products-{id}",
        "summary": "Get product\r",
        "description": "Retrieves detailed product information by ID",
        "tags": [
          "Products"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "include_variants",
            "schema": {
              "type": "boolean",
              "description": "Whether to include product variants"
            },
            "required": false,
            "description": "Whether to include product variants"
          },
          {
            "in": "query",
            "name": "currency",
            "schema": {
              "type": "string",
              "enum": [
                "USD",
                "EUR",
                "PLN"
              ],
              "description": "Currency for prices"
            },
            "required": false,
            "description": "Currency for prices"
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "description": "Unique product identifier"
            },
            "required": true,
            "description": "Unique product identifier",
            "example": "123"
          }
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponseSchema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "patch-products-{id}",
        "summary": "Update product\r",
        "description": "Updates an existing product",
        "tags": [
          "Products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "description": "Unique product identifier"
            },
            "required": true,
            "description": "Unique product identifier",
            "example": "123"
          }
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponseSchema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "delete-products-{id}",
        "summary": "Delete product\r",
        "description": "Removes a product from the system",
        "tags": [
          "Products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "description": "Unique product identifier"
            },
            "required": true,
            "description": "Unique product identifier",
            "example": "123"
          }
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/upload": {
      "post": {
        "operationId": "post-upload",
        "summary": "Upload image file\r",
        "description": "Uploads PNG or JPG image files with validation and metadata",
        "tags": [
          "Uploads"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UploadFormDataSchema"
              }
            }
          },
          "description": "Multipart form data containing image file (PNG/JPG, max 5MB), optional description and category"
        },
        "responses": {
          "201": {
            "description": "Returns upload confirmation with file metadata and access URL",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadResponseSchema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users": {
      "get": {
        "operationId": "get-users",
        "summary": "Get users\r",
        "description": "Retrieve users",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "pagination",
            "schema": {
              "type": "object"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "object"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Response users list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetailedSchema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "operationId": "get-users-{id}",
        "summary": "Get user by ID\r",
        "description": "Retrieves detailed user information",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string",
              "description": "Comma-separated list of fields to include"
            },
            "required": false,
            "description": "Comma-separated list of fields to include"
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "description": "User ID"
            },
            "required": true,
            "description": "User ID",
            "example": "123"
          }
        ],
        "responses": {
          "200": {
            "description": "Return user details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetailedSchema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "patch-users-{id}",
        "summary": "Update user\r",
        "description": "Updates user information",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "description": "User ID"
            },
            "required": true,
            "description": "User ID",
            "example": "123"
          }
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update user info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetailedSchema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "delete-users-{id}",
        "summary": "Delete user\r",
        "description": "Deletes a user account",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "description": "User ID"
            },
            "required": true,
            "description": "User ID",
            "example": "123"
          }
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  }
}